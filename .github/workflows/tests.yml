name: Tests

on:
    push:
        branches: ["main"]
    pull_request:
        branches: ["main"]

env:
    DB_USER: test
    DB_PASS: test
    DB_HOST: db
    DB_PORT: 5432
    DB_NAME: test
    DEBUG: True
    SECRET_KEY: test-secret-key
    ALLOWED_HOSTS: 127.0.0.1,localhost,testserver
    SHELL: bash

jobs:
    code-test:
        runs-on: ubuntu-latest

        services:
            postgres_db:
              image: postgres:13-alpine
              env:
                  POSTGRES_USER: ${{ env.DB_USER }}
                  POSTGRES_PASSWORD: ${{ env.DB_PASS }}
                  POSTGRES_PORT: ${{ env.DB_PORT }}
                  POSTGRES_DB: ${{ env.DB_NAME }}
              ports:
                  - 5432:5432
              options: >-
                  --health-cmd pg_isready
                  --health-interval 10s
                  --health-timeout 5s
                  --health-retries 5

        steps:
            # Downloads a copy of the code in your repository before running CI tests
            - name: Checkout code
              uses: actions/checkout@v3

            - name: Install dependencies
              run: |
                  python -m pip install --upgrade pip
                  pip install -r requirements/local.txt

            - name: Run django tests
              run: python manage.py test apps/

            - name: Check formatting with black
              run: black --check --diff .

            - name: Check import sorting with isort
              run: isort --check --diff .

            - name: Check linting with flake8
              run: flake8 --show-source --statistics .
    
    docker-test:
        runs-on: ubuntu-latest

        steps:
            # Downloads a copy of the code in your repository before running CI tests
            - name: Checkout code
              uses: actions/checkout@v3
            
            - name: Create .env file
              run: |
                DEBUG=${{ env.DEBUG }} > .env
                echo SECRET_KEY=${{ env.SECRET_KEY }} >> .env
                echo ALLOWED_HOSTS=${{ env.ALLOWED_HOSTS }} >> .env

                echo DB_USER=${{ env.DB_USER }} >> .env
                echo DB_PASS=${{ env.DB_PASS }} >> .env
                echo DB_HOST=${{ env.DB_HOST }} >> .env
                echo DB_PORT=${{ env.DB_PORT }} >> .env
                echo DB_NAME=${{ env.DB_NAME }} >> .env
                echo DJANGO_SETTINGS_MODULE="config.settings.test" >> .env


            # Builds the images and runs the tests then exits when done
            - name: Build images and run tests
              run: docker compose -f docker-compose.yml up --build --abort-on-container-exit
